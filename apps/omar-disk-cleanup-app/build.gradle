apply plugin: 'groovy'
apply plugin: 'maven'
buildscript {
    ext {
        baseImage = "omar-base"
        dockerStatementsOverride = {[
            "FROM ${project.dockerNamespaceUrl}${project.ext.baseImage}:${project.dockerAppTag}",
            """ENV JDBC_CONNECTION_STRING=jdbc:postgresql://host:5432/omar_db \\
    O2_DISK_VOLUME=/data \\
    O2_MAX_DISK_LIMIT=0.9 \\
    O2_MIN_DISK_LIMIT=0.8 \\
    POSTGRES_PASSWORD=password \\
    POSTGRES_USER=postgres \\
    STAGER_URL=http://omar-stager-app:8080/omar-stager""",
            "WORKDIR /home/omar",
            "COPY ${project.name}-${buildVersion}-${buildVersionTag}.jar .",
            "RUN echo 'while true; do java -jar /home/omar/${project.name}-${buildVersion}-${buildVersionTag}.jar; sleep 10m; done;' >> ${project.name}-${buildVersion}-${buildVersionTag}.sh",
            "CMD sh ${project.name}-${buildVersion}-${buildVersionTag}.sh"
        ]}
    }
    if( System.env.OMAR_COMMON_PROPERTIES ) {
        apply from: System.env.OMAR_COMMON_PROPERTIES
    }
    repositories {
        maven { url "${ossimMavenProxy}" }
        if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
            mavenLocal()
        }
    }
}
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

group "io.ossim.omar.apps"

repositories {
  maven { url "${ossimMavenProxy}" }
  if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
    mavenLocal()
    mavenCentral()
  }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.7'
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  compile 'org.postgresql:postgresql:9.4-1205-jdbc42'
}

jar {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

  manifest {
    attributes 'Main-Class': "diskCleanup"
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
